@page "/SolarInspectionsWorkload"

@using ManufacturingManager.Core.Repositories
@using ManufacturingManager.Core
@using ManufacturingManager.Components.UI
@using ManufacturingManager.Core.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager navigationManager
@inject IDataEntryRepository DataEntryRepository

@* @inject UserLogged CurrentUser *@
@* @attribute [Authorize(Roles = "Administrator,Coordinator,Specialist")] *@

<PageTitle>Solar Inspection Report Viewer</PageTitle>
<div class="card border">
    <div class="card-header">
        <div class="row">
            <div class="col-6" tabindex="0">
                <h2 class="text-primary" id="startContent">Solar Inspection Report Workload</h2>
            </div>
            <div class="col-6 text-right">
            </div>
        </div>

    </div>
    <br/>
    <div class="col-8" tabindex="0">
        <button class="btn btn-success mx-4" @onclick="() => AddNewRecord()" title="Add Solar Record"
                role="button" aria-pressed="false">
            Add Record
            @*<i class="bi-pencil"></i>*@
        </button>
    </div>
    
    <div class="card-body">
        <LookUpTablesGrid Items="_listofSolarInspections" TItem="SolarInspection" JqueryFileName="DatatableSolarInspectionWorkload" Args="@Args" SpinningNoRecords="false" Caption="DimensionWorkload">
            <Columns>
                <LookUpTablesGridColumn Name="SolarInspectionReportId" Label="Solar Id">
                    <div tabindex="0">
                        @context.SolarInspectionId
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="InspectorName" Label="Inspector Name">
                    <div tabindex="0">
                        @context.InspectorName
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="ClampThickness" Label="Clamp Thickness">
                    <div tabindex="0">
                        @context.ClampThickness
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="PaintIdentification_2700Yellow" Label="Paint Identification 2700 Yellow">
                    <div tabindex="0">
                        @context.PaintIdentification2700YellowString
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="CreatedDate" Label="Created Date">
                    <div tabindex="0">
                        @context.CreatedDate.ToString("yyyy/MM/dd HH:mm:ss")
                    </div>
                </LookUpTablesGridColumn>
                @*  <LookUpTablesGridColumn Name="QuickCase" Label="Quick Case">
                    <div class="text-center" tabindex="0">
                        @if (context.QuickCase)
                        {
                            <i class="bi bi-check-circle-fill" role="img" aria-label="Quick case" Title="Quick case" style="font-size: 1.5rem; color: green;"></i>
                        }
                    </div>
                </LookUpTablesGridColumn> *@
                @*  <LookUpTablesGridColumn Name="CaseStatusDescription" Label="Status">
                    <div tabindex="0">
                    @if (context.StatusId == 500)
                    {
                            <span class="text-danger-508 p-2 fw-bold">@context.CaseStatusDescription</span>
                    }
                    else
                    {
                        @context.CaseStatusDescription
                    }
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="CategoryDescription" Label="Question Category">
                    <div tabindex="0">
                        @context.CategoryDescription 
                    </div>
                </LookUpTablesGridColumn>
                <LookUpTablesGridColumn Name="PriorityDescription" Label="Priority">
                    <div tabindex="0">
                        @context.PriorityDescription  
                    </div>
                </LookUpTablesGridColumn>
 *@
                <LookUpTablesGridColumn Name="" Label="Action">
                    @{

                        var id = context.SolarInspectionId;

                        <button class="btn btn-success mx-4" @onclick="() => GetSelectedRecords(id)" title="Edit Solar @context.SolarInspectionId"
                                role="button" aria-pressed="false">
                            <i class="bi-pencil"></i>
                        </button>
                       
                        // <button class="btn btn-secondary text-white" value="" @onclick="() => ViewLog(id, context.InspectorName)" title=" View log information for Case  @context.DimensionId"
                        //         role="button" aria-pressed="false">
                        //     <i class="bi-binoculars"></i>
                        // </button>
                    }

                </LookUpTablesGridColumn>
            </Columns>
        </LookUpTablesGrid>

        @if (ShowDialogOpen)
        {
            <ViewCaseLogs Title="@LogTitle" RecordId="@RecordId" OnClose="@OnDeleteDialogClose" Args="@ArgsView"></ViewCaseLogs>
        }
    </div>
</div>

@code{

    public IList<SolarInspection> _listofSolarInspections = new List<SolarInspection>();
    public string? LogTitle { get; set; }
    public int RecordId { get; set; }
    private bool ShowDialogOpen { get; set; }
    private LookUpTableArgs Args { get; set; }
    public LookUpTableArgs ArgsView { get; set; }
    private IList<Decision>? _okNokList;
    
    protected override async Task OnInitializedAsync()
    {
        Args = new LookUpTableArgs
        {
            TableName = "SolarInspectionTable",
            FilenameToExportExcel = "SolarInspectionWorkload"//,
            //TitleInExcelFile = "Workload for user "
        };
        
        _okNokList = DropDownCategories.GetDecisions();
        
        _listofSolarInspections = (IList<SolarInspection>)await DataEntryRepository.GetSolarInspectionsDataView();
        foreach (var solarInspection in _listofSolarInspections)
        {
            var decisionname = _okNokList
                .Where(x => x.DecisionId == solarInspection.PaintIdentification2700Yellow).FirstOrDefault().DecisionName;
            solarInspection.PaintIdentification2700YellowString = decisionname;
        }
       

    }
     
    protected void GetSelectedRecords(int solarInspectionReportId)
    {
        SessionStorage.SetAsync("SolarInspectionReportId", solarInspectionReportId);
        navigationManager.NavigateTo("/EditSolarInspection");
    }
    
    protected void AddNewRecord()
    {
        navigationManager.NavigateTo("/AddSolarInspection");
    }

    private async void OnDeleteDialogClose()
    {
        ShowDialogOpen = false;
        await InvokeAsync(StateHasChanged);
    }

}
