@typeparam TItem

<div class="btn-group">

    <button class="@DropdownStyle dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
        @DrowpdownTiTleToShow
    </button>

    @if (Data != null)
    {

        <ul class="dropdown-menu border border-1 ps-2" aria-labelledby="dropdownMenuButton1">
            @foreach (var item in Data)
            {
                var text = TextField?.Invoke(item);
                var value = ValueField?.Invoke(item).ToString();
                bool isChecked = SelectedValues.Contains(value!);
                <li class="dropdown-item">
                    <input type="checkbox" checked=@isChecked @onchange="eventArgs => { CheckboxClicked(value!, eventArgs.Value); }" />
                    @text
                </li>
            }
        </ul>

    }
 
</div>
@code {
    //Data for the Checkbox
    [Parameter] public IEnumerable<TItem>? Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; } = null!;
    // The Value which checkbox will return when checked
    [Parameter] public Func<TItem, object> ValueField { get; set; } = null!;
    // CSS Style for the Checkbox container
    [Parameter] public string DropdownStyle { get; set; } = null!;
    [Parameter] public string? DropdownTitle { get; set; } = null!;
    // The array which contains the list of selected checkboxs
    [Parameter] public List<string> SelectedValues { get; set; } = null!;

    public string? DrowpdownTiTleToShow { get; set; }
    public int ItemsSelected { get; set; }
    //Method to update the selected value on click on checkbox
    protected override Task OnInitializedAsync()
    {
        DrowpdownTiTleToShow = DropdownTitle;
        ItemsSelected = 0;
        return Task.CompletedTask;
    }

    public void CheckboxClicked(string aSelectedId, object? aChecked)
    {
        if ((bool)aChecked!)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
                ItemsSelected++;
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
                ItemsSelected--;
            }
        }
        DrowpdownTiTleToShow = DropdownTitle;
        if (ItemsSelected > 0)
        {
            DrowpdownTiTleToShow += $" ({ItemsSelected})";
        }
        StateHasChanged();
    }
}
